name: Code Quality

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          clang-format \
          cppcheck \
          splint

    - name: Check code formatting
      run: |
        # Check if C files are properly formatted
        find src test -name "*.c" -o -name "*.h" | xargs clang-format --dry-run --Werror || {
          echo "Code formatting issues found. Run 'clang-format -i src/*.c src/*.h test/*.c test/*.h' to fix."
          exit 1
        }

    - name: Static analysis with cppcheck
      run: |
        cppcheck \
          --enable=all \
          --error-exitcode=1 \
          --suppress=missingIncludeSystem \
          --suppress=unusedFunction \
          --suppress=unmatchedSuppression \
          --inline-suppr \
          src/ test/

    - name: Check for common issues
      run: |
        # Check for TODO/FIXME comments
        if grep -r "TODO\|FIXME" src/ test/ --include="*.c" --include="*.h"; then
          echo "Warning: Found TODO/FIXME comments"
        fi

        # Check for debug printf statements
        if grep -r "printf.*debug\|DEBUG" src/ --include="*.c" --include="*.h"; then
          echo "Warning: Found debug print statements"
        fi

        # Check for memory leaks patterns
        if grep -r "malloc\|calloc" src/ --include="*.c" | grep -v "free"; then
          echo "Warning: Found malloc/calloc without corresponding free (manual review needed)"
        fi

  documentation:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Check documentation
      run: |
        # Check if README exists and has basic sections
        if [ ! -f README.md ]; then
          echo "Error: README.md not found"
          exit 1
        fi

        # Check for required sections in README
        required_sections=("Features" "Building" "Usage" "Dependencies")
        for section in "${required_sections[@]}"; do
          if ! grep -q "## $section\|# $section" README.md; then
            echo "Warning: Missing '$section' section in README.md"
          fi
        done

        # Check for license file
        if [ ! -f LICENSE ] && [ ! -f COPYING ]; then
          echo "Warning: No license file found"
        fi

        # Check for basic function documentation
        undocumented_functions=$(grep -n "^[a-zA-Z_][a-zA-Z0-9_]* [a-zA-Z_][a-zA-Z0-9_]*(" src/*.c | grep -v "static" | wc -l)
        echo "Found $undocumented_functions public functions (manual review for documentation needed)"

  security:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Security scan
      run: |
        # Check for potential security issues
        echo "Checking for potential security issues..."
        # Buffer overflow patterns
        if grep -r "strcpy\|strcat\|sprintf\|gets" src/ --include="*.c" --include="*.h"; then
          echo "Warning: Found potentially unsafe string functions"
        fi

        # Check for hardcoded paths
        if grep -r "/tmp\|/var\|/usr" src/ --include="*.c" --include="*.h"; then
          echo "Warning: Found hardcoded paths"
        fi

        # Check for shell command execution
        if grep -r "system\|exec\|popen" src/ --include="*.c" --include="*.h"; then
          echo "Warning: Found shell command execution"
        fi

        echo "Security scan completed"

  build-matrix:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [gcc, clang]

    steps:
    - uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          clang \
          libtiff5-dev \
          libgeotiff-dev \
          pkg-config \
          zlib1g-dev \
          libjpeg-dev \
          libpng-dev

    - name: Cache HDF5 (develop)
      id: cache-hdf5
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/hdf5-develop
        key: hdf5-develop-${{ matrix.compiler }}-${{ runner.os }}-${{ github.run_number }}-${{ hashFiles('.github/workflows/code-quality.yml') }}

    - name: Build HDF5 develop
      if: steps.cache-hdf5.outputs.cache-hit != 'true'
      run: |
        cd ${{ github.workspace }}
        git clone --depth 1 --branch develop https://github.com/HDFGroup/hdf5.git hdf5-develop-src
        cd hdf5-develop-src
        mkdir build && cd build
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/hdf5-develop \
          -DHDF5_ENABLE_PARALLEL=OFF \
          -DHDF5_BUILD_TOOLS=ON \
          -DHDF5_BUILD_EXAMPLES=OFF \
          -DHDF5_BUILD_TESTS=OFF \
          -DBUILD_SHARED_LIBS=ON \
          -DHDF5_ENABLE_Z_LIB_SUPPORT=ON
        make -j$(nproc)
        make install

    - name: Build with ${{ matrix.compiler }}
      run: |
        mkdir build-${{ matrix.compiler }} && cd build-${{ matrix.compiler }}

        if [ "${{ matrix.compiler }}" = "clang" ]; then
          export CC=clang
          export CXX=clang++
        else
          export CC=gcc
          export CXX=g++
        fi

        cmake .. \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_C_FLAGS="-Wall -Wextra -Werror" \
          -DHDF5_DIR=${{ github.workspace }}/hdf5-develop/share/cmake \
          -DCMAKE_PREFIX_PATH=${{ github.workspace }}/hdf5-develop

        make -j$(nproc)

    - name: Test with ${{ matrix.compiler }}
      run: |
        cd build-${{ matrix.compiler }}
        export HDF5_PLUGIN_PATH=$PWD/src
        export LD_LIBRARY_PATH=${{ github.workspace }}/hdf5-develop/lib:$LD_LIBRARY_PATH
        make test