name: Comprehensive Testing

on:
  schedule:
    # Run comprehensive tests weekly on Sunday at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    # Allow manual triggering

jobs:
  comprehensive-matrix-test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-20.04, macos-latest]
        hdf5_version: ['develop']
        compiler: [gcc, clang]
        build_type: [Release, Debug]
        exclude:
          # Reduce matrix size for macOS (clang is default)
          - os: macos-latest
            compiler: gcc

    steps:
    - uses: actions/checkout@v4

    - name: Set up environment
      run: |
        echo "OS: ${{ matrix.os }}"
        echo "HDF5: ${{ matrix.hdf5_version }}"
        echo "Compiler: ${{ matrix.compiler }}"
        echo "Build type: ${{ matrix.build_type }}"

    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          pkg-config \
          libtiff5-dev \
          libgeotiff-dev \
          zlib1g-dev \
          libcurl4-openssl-dev \
          libjpeg-dev \
          libpng-dev \
          valgrind

        if [ "${{ matrix.compiler }}" = "clang" ]; then
          sudo apt-get install -y clang
        fi

    - name: Install macOS dependencies
      if: runner.os == 'macOS'
      run: |
        brew install cmake pkg-config libtiff libgeotiff

    - name: Cache HDF5
      id: cache-hdf5
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/hdf5-${{ matrix.hdf5_version }}
        key: hdf5-${{ matrix.hdf5_version }}-${{ matrix.os }}-${{ matrix.compiler }}-${{ github.run_number }}-${{ hashFiles('.github/workflows/comprehensive-test.yml') }}

    - name: Build HDF5
      if: steps.cache-hdf5.outputs.cache-hit != 'true'
      run: |
        cd ${{ github.workspace }}
        git clone --depth 1 --branch develop https://github.com/HDFGroup/hdf5.git hdf5-${{ matrix.hdf5_version }}
        cd hdf5-${{ matrix.hdf5_version }}
        mkdir build && cd build

        if [ "${{ matrix.compiler }}" = "clang" ]; then
          export CC=clang
          export CXX=clang++
        fi

        cmake .. \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/hdf5-${{ matrix.hdf5_version }} \
          -DHDF5_ENABLE_PARALLEL=OFF \
          -DHDF5_BUILD_TOOLS=ON \
          -DHDF5_BUILD_EXAMPLES=OFF \
          -DHDF5_BUILD_TESTS=OFF \
          -DBUILD_SHARED_LIBS=ON \
          -DHDF5_ENABLE_Z_LIB_SUPPORT=ON

        if [ "${{ runner.os }}" = "macOS" ]; then
          make -j$(sysctl -n hw.ncpu)
        else
          make -j$(nproc)
        fi
        make install

    - name: Create comprehensive test GeoTIFFs
      run: |
        cd test
        # Create simple test TIFF files for different data types
        # test_uint8.tif
        dd if=/dev/zero of=test_uint8.tif bs=1024 count=5 2>/dev/null
        printf 'II*\0\x08\0\0\0' | dd of=test_uint8.tif conv=notrunc 2>/dev/null

        # test_uint16.tif
        dd if=/dev/zero of=test_uint16.tif bs=1024 count=3 2>/dev/null
        printf 'II*\0\x08\0\0\0' | dd of=test_uint16.tif conv=notrunc 2>/dev/null

        # test_float32.tif
        dd if=/dev/zero of=test_float32.tif bs=1024 count=2 2>/dev/null
        printf 'II*\0\x08\0\0\0' | dd of=test_float32.tif conv=notrunc 2>/dev/null

        # test_rgb.tif
        dd if=/dev/zero of=test_rgb.tif bs=1024 count=4 2>/dev/null
        printf 'II*\0\x08\0\0\0' | dd of=test_rgb.tif conv=notrunc 2>/dev/null

        echo "Created test TIFF files"

    - name: Configure and build
      run: |
        mkdir build && cd build

        if [ "${{ matrix.compiler }}" = "clang" ]; then
          export CC=clang
          export CXX=clang++
        fi

        cmake .. \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DHDF5_DIR=${{ github.workspace }}/hdf5-${{ matrix.hdf5_version }}/share/cmake \
          -DCMAKE_PREFIX_PATH=${{ github.workspace }}/hdf5-${{ matrix.hdf5_version }} \
          -DCMAKE_C_FLAGS="-Wall -Wextra"

        if [ "${{ runner.os }}" = "macOS" ]; then
          make -j$(sysctl -n hw.ncpu)
        else
          make -j$(nproc)
        fi

    - name: Run comprehensive tests
      run: |
        cd build
        export HDF5_PLUGIN_PATH=$PWD/src
        if [ "${{ runner.os }}" = "Linux" ]; then
          export LD_LIBRARY_PATH=${{ github.workspace }}/hdf5-${{ matrix.hdf5_version }}/lib:$LD_LIBRARY_PATH
        else
          export DYLD_LIBRARY_PATH=${{ github.workspace }}/hdf5-${{ matrix.hdf5_version }}/lib:$DYLD_LIBRARY_PATH
        fi
        export PATH=${{ github.workspace }}/hdf5-${{ matrix.hdf5_version }}/bin:$PATH

        # Run basic tests
        make test

        # Test with different GeoTIFF files
        for tiff_file in ../test/test_*.tif; do
          if [ -f "$tiff_file" ]; then
            echo "Testing with $tiff_file"
            ./test/test_geotiff_read "$tiff_file" || echo "Test failed for $tiff_file"
          fi
        done

    - name: Memory leak test (Linux only)
      if: runner.os == 'Linux' && matrix.build_type == 'Debug'
      run: |
        cd build
        export HDF5_PLUGIN_PATH=$PWD/src
        export LD_LIBRARY_PATH=${{ github.workspace }}/hdf5-${{ matrix.hdf5_version }}/lib:$LD_LIBRARY_PATH

        # Run valgrind on basic test
        valgrind --leak-check=full --error-exitcode=1 ./test/vol_plugin

        # Test one GeoTIFF file with valgrind
        if [ -f ../test/test_uint8.tif ]; then
          valgrind --leak-check=full --error-exitcode=1 ./test/test_geotiff_read ../test/test_uint8.tif
        fi

    - name: Performance test
      run: |
        cd build
        export HDF5_PLUGIN_PATH=$PWD/src
        if [ "${{ runner.os }}" = "Linux" ]; then
          export LD_LIBRARY_PATH=${{ github.workspace }}/hdf5-${{ matrix.hdf5_version }}/lib:$LD_LIBRARY_PATH
        else
          export DYLD_LIBRARY_PATH=${{ github.workspace }}/hdf5-${{ matrix.hdf5_version }}/lib:$DYLD_LIBRARY_PATH
        fi

        # Simple performance timing
        if [ -f ../test/test_uint16.tif ]; then
          echo "Performance test:"
          time ./test/test_geotiff_read ../test/test_uint16.tif
        fi

    - name: Upload test artifacts on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-failure-${{ matrix.os }}-${{ matrix.hdf5_version }}-${{ matrix.compiler }}-${{ matrix.build_type }}
        path: |
          build/Testing/Temporary/
          build/CMakeFiles/CMakeOutput.log
          build/CMakeFiles/CMakeError.log

  test-summary:
    runs-on: ubuntu-latest
    needs: comprehensive-matrix-test
    if: always()

    steps:
    - name: Test Summary
      run: |
        echo "Comprehensive testing completed!"
        echo "Check individual job results for details."

        if [ "${{ needs.comprehensive-matrix-test.result }}" != "success" ]; then
          echo "Some tests failed. Please review the job outputs."
          exit 1
        fi